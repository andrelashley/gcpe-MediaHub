/* tslint:disable */
/* eslint-disable */
/**
 * GCPE Media Hub 2.0 API
 * GCPE Media Hub 2.0
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MediaContact } from '../model';
// @ts-ignore
import type { MediaContactDto } from '../model';
// @ts-ignore
import type { SocialMediaCompanyDto } from '../model';
/**
 * MediaContactsApi - axios parameter creator
 * @export
 */
export const MediaContactsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaContacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsGetSocialMediasGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaContacts/GetSocialMedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaContactsIdDelete', 'id', id)
            const localVarPath = `/api/MediaContacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaContactsIdGet', 'id', id)
            const localVarPath = `/api/MediaContacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {MediaContact} [mediaContact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsIdPut: async (id: string, mediaContact?: MediaContact, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaContactsIdPut', 'id', id)
            const localVarPath = `/api/MediaContacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mediaContact, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MediaContactDto} [mediaContactDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsPost: async (mediaContactDto?: MediaContactDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaContacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mediaContactDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fullName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsSearchFullNameGet: async (fullName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fullName' is not null or undefined
            assertParamExists('apiMediaContactsSearchFullNameGet', 'fullName', fullName)
            const localVarPath = `/api/MediaContacts/search/{fullName}`
                .replace(`{${"fullName"}}`, encodeURIComponent(String(fullName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaContactsApi - functional programming interface
 * @export
 */
export const MediaContactsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaContactsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaContactsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaContactDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaContactsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaContactsApi.apiMediaContactsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaContactsGetSocialMediasGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SocialMediaCompanyDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaContactsGetSocialMediasGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaContactsApi.apiMediaContactsGetSocialMediasGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaContactsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaContactsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaContactsApi.apiMediaContactsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaContactsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaContactsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaContactsApi.apiMediaContactsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {MediaContact} [mediaContact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaContactsIdPut(id: string, mediaContact?: MediaContact, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaContactsIdPut(id, mediaContact, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaContactsApi.apiMediaContactsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MediaContactDto} [mediaContactDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaContactsPost(mediaContactDto?: MediaContactDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaContactsPost(mediaContactDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaContactsApi.apiMediaContactsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} fullName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaContactsSearchFullNameGet(fullName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaContactsSearchFullNameGet(fullName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaContactsApi.apiMediaContactsSearchFullNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MediaContactsApi - factory interface
 * @export
 */
export const MediaContactsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaContactsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<MediaContactDto>> {
            return localVarFp.apiMediaContactsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsGetSocialMediasGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SocialMediaCompanyDto>> {
            return localVarFp.apiMediaContactsGetSocialMediasGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaContactsApiApiMediaContactsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsIdDelete(requestParameters: MediaContactsApiApiMediaContactsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMediaContactsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaContactsApiApiMediaContactsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsIdGet(requestParameters: MediaContactsApiApiMediaContactsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MediaContact> {
            return localVarFp.apiMediaContactsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaContactsApiApiMediaContactsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsIdPut(requestParameters: MediaContactsApiApiMediaContactsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMediaContactsIdPut(requestParameters.id, requestParameters.mediaContact, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaContactsApiApiMediaContactsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsPost(requestParameters: MediaContactsApiApiMediaContactsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<MediaContact> {
            return localVarFp.apiMediaContactsPost(requestParameters.mediaContactDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaContactsApiApiMediaContactsSearchFullNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaContactsSearchFullNameGet(requestParameters: MediaContactsApiApiMediaContactsSearchFullNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MediaContact> {
            return localVarFp.apiMediaContactsSearchFullNameGet(requestParameters.fullName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMediaContactsIdDelete operation in MediaContactsApi.
 * @export
 * @interface MediaContactsApiApiMediaContactsIdDeleteRequest
 */
export interface MediaContactsApiApiMediaContactsIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof MediaContactsApiApiMediaContactsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiMediaContactsIdGet operation in MediaContactsApi.
 * @export
 * @interface MediaContactsApiApiMediaContactsIdGetRequest
 */
export interface MediaContactsApiApiMediaContactsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MediaContactsApiApiMediaContactsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiMediaContactsIdPut operation in MediaContactsApi.
 * @export
 * @interface MediaContactsApiApiMediaContactsIdPutRequest
 */
export interface MediaContactsApiApiMediaContactsIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof MediaContactsApiApiMediaContactsIdPut
     */
    readonly id: string

    /**
     * 
     * @type {MediaContact}
     * @memberof MediaContactsApiApiMediaContactsIdPut
     */
    readonly mediaContact?: MediaContact
}

/**
 * Request parameters for apiMediaContactsPost operation in MediaContactsApi.
 * @export
 * @interface MediaContactsApiApiMediaContactsPostRequest
 */
export interface MediaContactsApiApiMediaContactsPostRequest {
    /**
     * 
     * @type {MediaContactDto}
     * @memberof MediaContactsApiApiMediaContactsPost
     */
    readonly mediaContactDto?: MediaContactDto
}

/**
 * Request parameters for apiMediaContactsSearchFullNameGet operation in MediaContactsApi.
 * @export
 * @interface MediaContactsApiApiMediaContactsSearchFullNameGetRequest
 */
export interface MediaContactsApiApiMediaContactsSearchFullNameGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MediaContactsApiApiMediaContactsSearchFullNameGet
     */
    readonly fullName: string
}

/**
 * MediaContactsApi - object-oriented interface
 * @export
 * @class MediaContactsApi
 * @extends {BaseAPI}
 */
export class MediaContactsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaContactsApi
     */
    public apiMediaContactsGet(options?: RawAxiosRequestConfig) {
        return MediaContactsApiFp(this.configuration).apiMediaContactsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaContactsApi
     */
    public apiMediaContactsGetSocialMediasGet(options?: RawAxiosRequestConfig) {
        return MediaContactsApiFp(this.configuration).apiMediaContactsGetSocialMediasGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaContactsApiApiMediaContactsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaContactsApi
     */
    public apiMediaContactsIdDelete(requestParameters: MediaContactsApiApiMediaContactsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return MediaContactsApiFp(this.configuration).apiMediaContactsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaContactsApiApiMediaContactsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaContactsApi
     */
    public apiMediaContactsIdGet(requestParameters: MediaContactsApiApiMediaContactsIdGetRequest, options?: RawAxiosRequestConfig) {
        return MediaContactsApiFp(this.configuration).apiMediaContactsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaContactsApiApiMediaContactsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaContactsApi
     */
    public apiMediaContactsIdPut(requestParameters: MediaContactsApiApiMediaContactsIdPutRequest, options?: RawAxiosRequestConfig) {
        return MediaContactsApiFp(this.configuration).apiMediaContactsIdPut(requestParameters.id, requestParameters.mediaContact, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaContactsApiApiMediaContactsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaContactsApi
     */
    public apiMediaContactsPost(requestParameters: MediaContactsApiApiMediaContactsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return MediaContactsApiFp(this.configuration).apiMediaContactsPost(requestParameters.mediaContactDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaContactsApiApiMediaContactsSearchFullNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaContactsApi
     */
    public apiMediaContactsSearchFullNameGet(requestParameters: MediaContactsApiApiMediaContactsSearchFullNameGetRequest, options?: RawAxiosRequestConfig) {
        return MediaContactsApiFp(this.configuration).apiMediaContactsSearchFullNameGet(requestParameters.fullName, options).then((request) => request(this.axios, this.basePath));
    }
}

