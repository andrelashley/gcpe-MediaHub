/* tslint:disable */
/* eslint-disable */
/**
 * GCPE Media Hub 2.0 API
 * GCPE Media Hub 2.0
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateOrganizationDto } from '../model';
// @ts-ignore
import type { MediaOutlet } from '../model';
// @ts-ignore
import type { OrganizationListDto } from '../model';
/**
 * MediaOutletsApi - axios parameter creator
 * @export
 */
export const MediaOutletsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsDropdownsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaOutlets/dropdowns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaOutlets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaOutletsIdDelete', 'id', id)
            const localVarPath = `/api/MediaOutlets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaOutletsIdGet', 'id', id)
            const localVarPath = `/api/MediaOutlets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {MediaOutlet} [mediaOutlet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsIdPut: async (id: string, mediaOutlet?: MediaOutlet, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaOutletsIdPut', 'id', id)
            const localVarPath = `/api/MediaOutlets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mediaOutlet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrganizationDto} [createOrganizationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsPost: async (createOrganizationDto?: CreateOrganizationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaOutlets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrganizationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaOutletsApi - functional programming interface
 * @export
 */
export const MediaOutletsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaOutletsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaOutletsDropdownsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaOutletsDropdownsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaOutletsApi.apiMediaOutletsDropdownsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaOutletsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaOutletsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaOutletsApi.apiMediaOutletsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaOutletsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaOutletsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaOutletsApi.apiMediaOutletsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaOutletsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaOutlet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaOutletsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaOutletsApi.apiMediaOutletsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {MediaOutlet} [mediaOutlet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaOutletsIdPut(id: string, mediaOutlet?: MediaOutlet, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaOutletsIdPut(id, mediaOutlet, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaOutletsApi.apiMediaOutletsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateOrganizationDto} [createOrganizationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaOutletsPost(createOrganizationDto?: CreateOrganizationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaOutlet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaOutletsPost(createOrganizationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaOutletsApi.apiMediaOutletsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MediaOutletsApi - factory interface
 * @export
 */
export const MediaOutletsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaOutletsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsDropdownsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMediaOutletsDropdownsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrganizationListDto>> {
            return localVarFp.apiMediaOutletsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaOutletsApiApiMediaOutletsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsIdDelete(requestParameters: MediaOutletsApiApiMediaOutletsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMediaOutletsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaOutletsApiApiMediaOutletsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsIdGet(requestParameters: MediaOutletsApiApiMediaOutletsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MediaOutlet> {
            return localVarFp.apiMediaOutletsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaOutletsApiApiMediaOutletsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsIdPut(requestParameters: MediaOutletsApiApiMediaOutletsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMediaOutletsIdPut(requestParameters.id, requestParameters.mediaOutlet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaOutletsApiApiMediaOutletsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaOutletsPost(requestParameters: MediaOutletsApiApiMediaOutletsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<MediaOutlet> {
            return localVarFp.apiMediaOutletsPost(requestParameters.createOrganizationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMediaOutletsIdDelete operation in MediaOutletsApi.
 * @export
 * @interface MediaOutletsApiApiMediaOutletsIdDeleteRequest
 */
export interface MediaOutletsApiApiMediaOutletsIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof MediaOutletsApiApiMediaOutletsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiMediaOutletsIdGet operation in MediaOutletsApi.
 * @export
 * @interface MediaOutletsApiApiMediaOutletsIdGetRequest
 */
export interface MediaOutletsApiApiMediaOutletsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MediaOutletsApiApiMediaOutletsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiMediaOutletsIdPut operation in MediaOutletsApi.
 * @export
 * @interface MediaOutletsApiApiMediaOutletsIdPutRequest
 */
export interface MediaOutletsApiApiMediaOutletsIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof MediaOutletsApiApiMediaOutletsIdPut
     */
    readonly id: string

    /**
     * 
     * @type {MediaOutlet}
     * @memberof MediaOutletsApiApiMediaOutletsIdPut
     */
    readonly mediaOutlet?: MediaOutlet
}

/**
 * Request parameters for apiMediaOutletsPost operation in MediaOutletsApi.
 * @export
 * @interface MediaOutletsApiApiMediaOutletsPostRequest
 */
export interface MediaOutletsApiApiMediaOutletsPostRequest {
    /**
     * 
     * @type {CreateOrganizationDto}
     * @memberof MediaOutletsApiApiMediaOutletsPost
     */
    readonly createOrganizationDto?: CreateOrganizationDto
}

/**
 * MediaOutletsApi - object-oriented interface
 * @export
 * @class MediaOutletsApi
 * @extends {BaseAPI}
 */
export class MediaOutletsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaOutletsApi
     */
    public apiMediaOutletsDropdownsGet(options?: RawAxiosRequestConfig) {
        return MediaOutletsApiFp(this.configuration).apiMediaOutletsDropdownsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaOutletsApi
     */
    public apiMediaOutletsGet(options?: RawAxiosRequestConfig) {
        return MediaOutletsApiFp(this.configuration).apiMediaOutletsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaOutletsApiApiMediaOutletsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaOutletsApi
     */
    public apiMediaOutletsIdDelete(requestParameters: MediaOutletsApiApiMediaOutletsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return MediaOutletsApiFp(this.configuration).apiMediaOutletsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaOutletsApiApiMediaOutletsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaOutletsApi
     */
    public apiMediaOutletsIdGet(requestParameters: MediaOutletsApiApiMediaOutletsIdGetRequest, options?: RawAxiosRequestConfig) {
        return MediaOutletsApiFp(this.configuration).apiMediaOutletsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaOutletsApiApiMediaOutletsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaOutletsApi
     */
    public apiMediaOutletsIdPut(requestParameters: MediaOutletsApiApiMediaOutletsIdPutRequest, options?: RawAxiosRequestConfig) {
        return MediaOutletsApiFp(this.configuration).apiMediaOutletsIdPut(requestParameters.id, requestParameters.mediaOutlet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaOutletsApiApiMediaOutletsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaOutletsApi
     */
    public apiMediaOutletsPost(requestParameters: MediaOutletsApiApiMediaOutletsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return MediaOutletsApiFp(this.configuration).apiMediaOutletsPost(requestParameters.createOrganizationDto, options).then((request) => request(this.axios, this.basePath));
    }
}

