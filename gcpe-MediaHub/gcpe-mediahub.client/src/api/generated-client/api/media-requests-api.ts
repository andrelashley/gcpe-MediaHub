/* tslint:disable */
/* eslint-disable */
/**
 * GCPE Media Hub 2.0 API
 * GCPE Media Hub 2.0
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MediaRequest } from '../model';
// @ts-ignore
import type { RequestDto } from '../model';
/**
 * MediaRequestsApi - axios parameter creator
 * @export
 */
export const MediaRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsDtosGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaRequests/dtos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaRequestsIdDelete', 'id', id)
            const localVarPath = `/api/MediaRequests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaRequestsIdGet', 'id', id)
            const localVarPath = `/api/MediaRequests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {MediaRequest} [mediaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsIdPut: async (id: string, mediaRequest?: MediaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaRequestsIdPut', 'id', id)
            const localVarPath = `/api/MediaRequests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mediaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MediaRequest} [mediaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsPost: async (mediaRequest?: MediaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mediaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaRequestsApi - functional programming interface
 * @export
 */
export const MediaRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaRequestsDtosGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RequestDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaRequestsDtosGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaRequestsApi.apiMediaRequestsDtosGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaRequestsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaRequest>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaRequestsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaRequestsApi.apiMediaRequestsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaRequestsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaRequestsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaRequestsApi.apiMediaRequestsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaRequestsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaRequestsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaRequestsApi.apiMediaRequestsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {MediaRequest} [mediaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaRequestsIdPut(id: string, mediaRequest?: MediaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaRequestsIdPut(id, mediaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaRequestsApi.apiMediaRequestsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MediaRequest} [mediaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaRequestsPost(mediaRequest?: MediaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaRequestsPost(mediaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaRequestsApi.apiMediaRequestsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MediaRequestsApi - factory interface
 * @export
 */
export const MediaRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaRequestsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsDtosGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<RequestDto>> {
            return localVarFp.apiMediaRequestsDtosGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<MediaRequest>> {
            return localVarFp.apiMediaRequestsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaRequestsApiApiMediaRequestsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsIdDelete(requestParameters: MediaRequestsApiApiMediaRequestsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMediaRequestsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaRequestsApiApiMediaRequestsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsIdGet(requestParameters: MediaRequestsApiApiMediaRequestsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MediaRequest> {
            return localVarFp.apiMediaRequestsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaRequestsApiApiMediaRequestsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsIdPut(requestParameters: MediaRequestsApiApiMediaRequestsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMediaRequestsIdPut(requestParameters.id, requestParameters.mediaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaRequestsApiApiMediaRequestsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaRequestsPost(requestParameters: MediaRequestsApiApiMediaRequestsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMediaRequestsPost(requestParameters.mediaRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMediaRequestsIdDelete operation in MediaRequestsApi.
 * @export
 * @interface MediaRequestsApiApiMediaRequestsIdDeleteRequest
 */
export interface MediaRequestsApiApiMediaRequestsIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof MediaRequestsApiApiMediaRequestsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiMediaRequestsIdGet operation in MediaRequestsApi.
 * @export
 * @interface MediaRequestsApiApiMediaRequestsIdGetRequest
 */
export interface MediaRequestsApiApiMediaRequestsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MediaRequestsApiApiMediaRequestsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiMediaRequestsIdPut operation in MediaRequestsApi.
 * @export
 * @interface MediaRequestsApiApiMediaRequestsIdPutRequest
 */
export interface MediaRequestsApiApiMediaRequestsIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof MediaRequestsApiApiMediaRequestsIdPut
     */
    readonly id: string

    /**
     * 
     * @type {MediaRequest}
     * @memberof MediaRequestsApiApiMediaRequestsIdPut
     */
    readonly mediaRequest?: MediaRequest
}

/**
 * Request parameters for apiMediaRequestsPost operation in MediaRequestsApi.
 * @export
 * @interface MediaRequestsApiApiMediaRequestsPostRequest
 */
export interface MediaRequestsApiApiMediaRequestsPostRequest {
    /**
     * 
     * @type {MediaRequest}
     * @memberof MediaRequestsApiApiMediaRequestsPost
     */
    readonly mediaRequest?: MediaRequest
}

/**
 * MediaRequestsApi - object-oriented interface
 * @export
 * @class MediaRequestsApi
 * @extends {BaseAPI}
 */
export class MediaRequestsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaRequestsApi
     */
    public apiMediaRequestsDtosGet(options?: RawAxiosRequestConfig) {
        return MediaRequestsApiFp(this.configuration).apiMediaRequestsDtosGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaRequestsApi
     */
    public apiMediaRequestsGet(options?: RawAxiosRequestConfig) {
        return MediaRequestsApiFp(this.configuration).apiMediaRequestsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaRequestsApiApiMediaRequestsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaRequestsApi
     */
    public apiMediaRequestsIdDelete(requestParameters: MediaRequestsApiApiMediaRequestsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return MediaRequestsApiFp(this.configuration).apiMediaRequestsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaRequestsApiApiMediaRequestsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaRequestsApi
     */
    public apiMediaRequestsIdGet(requestParameters: MediaRequestsApiApiMediaRequestsIdGetRequest, options?: RawAxiosRequestConfig) {
        return MediaRequestsApiFp(this.configuration).apiMediaRequestsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaRequestsApiApiMediaRequestsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaRequestsApi
     */
    public apiMediaRequestsIdPut(requestParameters: MediaRequestsApiApiMediaRequestsIdPutRequest, options?: RawAxiosRequestConfig) {
        return MediaRequestsApiFp(this.configuration).apiMediaRequestsIdPut(requestParameters.id, requestParameters.mediaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaRequestsApiApiMediaRequestsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaRequestsApi
     */
    public apiMediaRequestsPost(requestParameters: MediaRequestsApiApiMediaRequestsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return MediaRequestsApiFp(this.configuration).apiMediaRequestsPost(requestParameters.mediaRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

